
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 09 19:57:56 ICT 2020
//----------------------------------------------------

package src;

import java.util.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 09 19:57:56 ICT 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\003\000\002\002\004\000\002\023" +
    "\004\000\002\023\003\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\012\006\000\002\012\005\000\002\013" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\015\006\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\015\006\000\002\020\005\000\002\016\007\000\002\017" +
    "\010\000\002\024\007\000\002\024\010\000\002\024\007" +
    "\000\002\024\006\000\002\021\007\000\002\022\010\000" +
    "\002\003\003\000\002\003\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\006\005\000\002\006\003\000\002\010" +
    "\005\000\002\010\003\000\002\010\004\000\002\010\003" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\030\012\013\013\031\027\006\030\024\031" +
    "\010\032\022\033\021\036\015\041\012\042\020\044\017" +
    "\001\002\000\004\014\211\001\002\000\034\002\ufffe\012" +
    "\ufffe\013\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\035\ufffe\036\ufffe\041\ufffe\042\ufffe\044\ufffe\001\002\000" +
    "\004\044\206\001\002\000\004\014\205\001\002\000\004" +
    "\044\202\001\002\000\004\014\201\001\002\000\022\005" +
    "\034\015\050\044\041\045\051\046\042\047\046\050\040" +
    "\051\036\001\002\000\004\015\171\001\002\000\004\014" +
    "\170\001\002\000\022\005\034\015\050\044\041\045\051" +
    "\046\042\047\046\050\040\051\036\001\002\000\004\002" +
    "\140\001\002\000\004\011\136\001\002\000\004\034\131" +
    "\001\002\000\004\044\126\001\002\000\004\044\123\001" +
    "\002\000\032\002\001\012\013\013\031\027\006\030\024" +
    "\031\010\032\022\033\021\036\015\041\012\042\020\044" +
    "\017\001\002\000\004\044\117\001\002\000\004\014\116" +
    "\001\002\000\004\014\115\001\002\000\004\014\114\001" +
    "\002\000\004\014\113\001\002\000\022\005\034\015\050" +
    "\044\041\045\051\046\042\047\046\050\040\051\036\001" +
    "\002\000\004\014\033\001\002\000\034\002\ufffb\012\ufffb" +
    "\013\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\035" +
    "\ufffb\036\ufffb\041\ufffb\042\ufffb\044\ufffb\001\002\000\006" +
    "\045\111\046\112\001\002\000\010\014\uffdd\016\uffdd\034" +
    "\uffdd\001\002\000\044\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\034\uffc4\043\uffc4" +
    "\001\002\000\042\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\014\uffd6\016\uffd6\017\074\020\100\021\071\022\073" +
    "\023\075\024\072\025\076\026\077\034\uffd6\001\002\000" +
    "\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\014\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\034\uffc5\043\uffc5\001\002\000\044" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\014\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\034\uffc3\043\uffc3\001\002\000\044\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\034\uffc8\043\uffc8\001\002\000\022\004\uffda" +
    "\005\uffda\006\062\007\061\010\060\014\uffda\016\uffda\034" +
    "\uffda\001\002\000\044\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\034\uffcc\043\067" +
    "\001\002\000\014\004\054\005\055\014\uffde\016\uffde\034" +
    "\uffde\001\002\000\044\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\014\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\034\uffc6\043\uffc6" +
    "\001\002\000\004\014\ufff2\001\002\000\022\005\034\015" +
    "\050\044\041\045\051\046\042\047\046\050\040\051\036" +
    "\001\002\000\044\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\034\uffca\043\uffca\001" +
    "\002\000\004\016\053\001\002\000\044\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\014\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\034\uffcb\043\uffcb\001\002\000\022\005\034\015\050\044" +
    "\041\045\051\046\042\047\046\050\040\051\036\001\002" +
    "\000\022\005\034\015\050\044\041\045\051\046\042\047" +
    "\046\050\040\051\036\001\002\000\022\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\014\uffd6\016\uffd6\034\uffd6\001" +
    "\002\000\022\004\uffdb\005\uffdb\006\062\007\061\010\060" +
    "\014\uffdb\016\uffdb\034\uffdb\001\002\000\022\005\034\015" +
    "\050\044\041\045\051\046\042\047\046\050\040\051\036" +
    "\001\002\000\022\005\034\015\050\044\041\045\051\046" +
    "\042\047\046\050\040\051\036\001\002\000\022\005\034" +
    "\015\050\044\041\045\051\046\042\047\046\050\040\051" +
    "\036\001\002\000\022\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\014\uffd9\016\uffd9\034\uffd9\001\002\000\022\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\014\uffd8\016\uffd8" +
    "\034\uffd8\001\002\000\022\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\014\uffd7\016\uffd7\034\uffd7\001\002\000\022" +
    "\004\uffdc\005\uffdc\006\062\007\061\010\060\014\uffdc\016" +
    "\uffdc\034\uffdc\001\002\000\022\005\034\015\050\044\041" +
    "\045\051\046\042\047\046\050\040\051\036\001\002\000" +
    "\042\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\014\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\034\uffcd\001\002\000\022\005\034" +
    "\015\050\044\041\045\051\046\042\047\046\050\040\051" +
    "\036\001\002\000\022\005\034\015\050\044\041\045\051" +
    "\046\042\047\046\050\040\051\036\001\002\000\022\005" +
    "\034\015\050\044\041\045\051\046\042\047\046\050\040" +
    "\051\036\001\002\000\022\005\034\015\050\044\041\045" +
    "\051\046\042\047\046\050\040\051\036\001\002\000\022" +
    "\005\034\015\050\044\041\045\051\046\042\047\046\050" +
    "\040\051\036\001\002\000\022\005\034\015\050\044\041" +
    "\045\051\046\042\047\046\050\040\051\036\001\002\000" +
    "\022\005\034\015\050\044\041\045\051\046\042\047\046" +
    "\050\040\051\036\001\002\000\022\005\034\015\050\044" +
    "\041\045\051\046\042\047\046\050\040\051\036\001\002" +
    "\000\010\014\uffd4\016\uffd4\034\uffd4\001\002\000\010\014" +
    "\uffce\016\uffce\034\uffce\001\002\000\010\014\uffcf\016\uffcf" +
    "\034\uffcf\001\002\000\010\014\uffd1\016\uffd1\034\uffd1\001" +
    "\002\000\010\014\uffd5\016\uffd5\034\uffd5\001\002\000\010" +
    "\014\uffd2\016\uffd2\034\uffd2\001\002\000\010\014\uffd0\016" +
    "\uffd0\034\uffd0\001\002\000\010\014\uffd3\016\uffd3\034\uffd3" +
    "\001\002\000\044\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\034\uffc9\043\uffc9\001" +
    "\002\000\044\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\034\uffc7\043\uffc7\001\002" +
    "\000\034\002\ufff7\012\ufff7\013\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\035\ufff7\036\ufff7\041\ufff7\042\ufff7" +
    "\044\ufff7\001\002\000\034\002\ufff9\012\ufff9\013\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\035\ufff9\036\ufff9" +
    "\041\ufff9\042\ufff9\044\ufff9\001\002\000\034\002\ufff6\012" +
    "\ufff6\013\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\035\ufff6\036\ufff6\041\ufff6\042\ufff6\044\ufff6\001\002\000" +
    "\034\002\ufff8\012\ufff8\013\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\035\ufff8\036\ufff8\041\ufff8\042\ufff8\044" +
    "\ufff8\001\002\000\006\011\120\014\ufff0\001\002\000\022" +
    "\005\034\015\050\044\041\045\051\046\042\047\046\050" +
    "\040\051\036\001\002\000\004\014\uffeb\001\002\000\034" +
    "\002\uffff\012\uffff\013\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\035\uffff\036\uffff\041\uffff\042\uffff\044\uffff" +
    "\001\002\000\006\011\124\014\uffef\001\002\000\022\005" +
    "\034\015\050\044\041\045\051\046\042\047\046\050\040" +
    "\051\036\001\002\000\004\014\uffe9\001\002\000\006\011" +
    "\127\014\uffed\001\002\000\022\005\034\015\050\044\041" +
    "\045\051\046\042\047\046\050\040\051\036\001\002\000" +
    "\004\014\uffe8\001\002\000\030\012\013\013\031\027\006" +
    "\030\024\031\010\032\022\033\021\036\015\041\012\042" +
    "\020\044\017\001\002\000\032\012\013\013\031\027\006" +
    "\030\024\031\010\032\022\033\021\035\133\036\015\041" +
    "\012\042\020\044\017\001\002\000\004\041\134\001\002" +
    "\000\022\005\034\015\050\044\041\045\051\046\042\047" +
    "\046\050\040\051\036\001\002\000\004\014\uffdf\001\002" +
    "\000\022\005\034\015\050\044\041\045\051\046\042\047" +
    "\046\050\040\051\036\001\002\000\004\014\uffe7\001\002" +
    "\000\004\002\000\001\002\000\004\034\142\001\002\000" +
    "\030\012\013\013\031\027\006\030\024\031\010\032\022" +
    "\033\021\036\015\041\012\042\020\044\017\001\002\000" +
    "\032\012\013\013\031\027\006\030\024\031\010\032\022" +
    "\033\021\035\144\036\015\041\012\042\020\044\017\001" +
    "\002\000\010\014\uffe6\037\147\040\146\001\002\000\010" +
    "\014\uffe5\037\160\040\157\001\002\000\022\005\034\015" +
    "\050\044\041\045\051\046\042\047\046\050\040\051\036" +
    "\001\002\000\004\034\150\001\002\000\030\012\013\013" +
    "\031\027\006\030\024\031\010\032\022\033\021\036\015" +
    "\041\012\042\020\044\017\001\002\000\032\012\013\013" +
    "\031\027\006\030\024\031\010\032\022\033\021\035\152" +
    "\036\015\041\012\042\020\044\017\001\002\000\010\014" +
    "\uffe1\037\uffe1\040\uffe1\001\002\000\004\034\154\001\002" +
    "\000\030\012\013\013\031\027\006\030\024\031\010\032" +
    "\022\033\021\036\015\041\012\042\020\044\017\001\002" +
    "\000\032\012\013\013\031\027\006\030\024\031\010\032" +
    "\022\033\021\035\156\036\015\041\012\042\020\044\017" +
    "\001\002\000\010\014\uffe2\037\uffe2\040\uffe2\001\002\000" +
    "\022\005\034\015\050\044\041\045\051\046\042\047\046" +
    "\050\040\051\036\001\002\000\004\034\161\001\002\000" +
    "\030\012\013\013\031\027\006\030\024\031\010\032\022" +
    "\033\021\036\015\041\012\042\020\044\017\001\002\000" +
    "\032\012\013\013\031\027\006\030\024\031\010\032\022" +
    "\033\021\035\163\036\015\041\012\042\020\044\017\001" +
    "\002\000\010\014\uffe4\037\uffe4\040\uffe4\001\002\000\004" +
    "\034\165\001\002\000\030\012\013\013\031\027\006\030" +
    "\024\031\010\032\022\033\021\036\015\041\012\042\020" +
    "\044\017\001\002\000\032\012\013\013\031\027\006\030" +
    "\024\031\010\032\022\033\021\035\167\036\015\041\012" +
    "\042\020\044\017\001\002\000\010\014\uffe3\037\uffe3\040" +
    "\uffe3\001\002\000\034\002\ufff5\012\ufff5\013\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\036\ufff5\041" +
    "\ufff5\042\ufff5\044\ufff5\001\002\000\024\005\034\015\050" +
    "\016\172\044\041\045\051\046\042\047\046\050\040\051" +
    "\036\001\002\000\004\014\ufff3\001\002\000\004\016\174" +
    "\001\002\000\004\014\ufff4\001\002\000\004\034\176\001" +
    "\002\000\030\012\013\013\031\027\006\030\024\031\010" +
    "\032\022\033\021\036\015\041\012\042\020\044\017\001" +
    "\002\000\032\012\013\013\031\027\006\030\024\031\010" +
    "\032\022\033\021\035\200\036\015\041\012\042\020\044" +
    "\017\001\002\000\004\014\uffe0\001\002\000\034\002\ufffc" +
    "\012\ufffc\013\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\035\ufffc\036\ufffc\041\ufffc\042\ufffc\044\ufffc\001\002" +
    "\000\006\011\203\014\uffee\001\002\000\022\005\034\015" +
    "\050\044\041\045\051\046\042\047\046\050\040\051\036" +
    "\001\002\000\004\014\uffea\001\002\000\034\002\ufffd\012" +
    "\ufffd\013\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\035\ufffd\036\ufffd\041\ufffd\042\ufffd\044\ufffd\001\002\000" +
    "\006\011\207\014\ufff1\001\002\000\022\005\034\015\050" +
    "\044\041\045\051\046\042\047\046\050\040\051\036\001" +
    "\002\000\004\014\uffec\001\002\000\034\002\ufffa\012\ufffa" +
    "\013\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\035" +
    "\ufffa\036\ufffa\041\ufffa\042\ufffa\044\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\032\002\015\011\004\012\010\013\006\014" +
    "\031\015\003\016\026\017\024\020\027\021\025\022\013" +
    "\023\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\174\004\044\005\042\006\036\007" +
    "\034\010\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\140\004\044\005\042\006\036\007\034\010" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\121\012\010\013\006\014\031\015\003\016\026\017\024" +
    "\020\027\021\025\022\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\046\004\044\005\042\006\036\007" +
    "\034\010\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\051" +
    "\004\044\005\042\006\036\007\034\010\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\065\006\055\010\043\001\001\000\010\005\056\006" +
    "\055\010\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\064\010\043\001\001\000\006\006\063\010" +
    "\043\001\001\000\006\006\062\010\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\067\010\043\001\001\000\002\001\001" +
    "\000\006\006\107\010\043\001\001\000\006\006\106\010" +
    "\043\001\001\000\006\006\105\010\043\001\001\000\006" +
    "\006\104\010\043\001\001\000\006\006\103\010\043\001" +
    "\001\000\006\006\102\010\043\001\001\000\006\006\101" +
    "\010\043\001\001\000\006\006\100\010\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\120\004\044" +
    "\005\042\006\036\007\034\010\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\124" +
    "\004\044\005\042\006\036\007\034\010\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\127\004\044" +
    "\005\042\006\036\007\034\010\043\001\001\000\002\001" +
    "\001\000\030\011\004\012\010\013\006\014\031\015\003" +
    "\016\026\017\024\020\027\021\025\022\013\023\131\001" +
    "\001\000\026\011\121\012\010\013\006\014\031\015\003" +
    "\016\026\017\024\020\027\021\025\022\013\001\001\000" +
    "\002\001\001\000\016\003\134\004\044\005\042\006\036" +
    "\007\034\010\043\001\001\000\002\001\001\000\016\003" +
    "\136\004\044\005\042\006\036\007\034\010\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\004\012\010\013\006\014\031\015\003\016\026" +
    "\017\024\020\027\021\025\022\013\023\142\001\001\000" +
    "\026\011\121\012\010\013\006\014\031\015\003\016\026" +
    "\017\024\020\027\021\025\022\013\001\001\000\004\024" +
    "\144\001\001\000\002\001\001\000\016\003\152\004\044" +
    "\005\042\006\036\007\034\010\043\001\001\000\002\001" +
    "\001\000\030\011\004\012\010\013\006\014\031\015\003" +
    "\016\026\017\024\020\027\021\025\022\013\023\150\001" +
    "\001\000\026\011\121\012\010\013\006\014\031\015\003" +
    "\016\026\017\024\020\027\021\025\022\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\004\012\010" +
    "\013\006\014\031\015\003\016\026\017\024\020\027\021" +
    "\025\022\013\023\154\001\001\000\026\011\121\012\010" +
    "\013\006\014\031\015\003\016\026\017\024\020\027\021" +
    "\025\022\013\001\001\000\002\001\001\000\016\003\163" +
    "\004\044\005\042\006\036\007\034\010\043\001\001\000" +
    "\002\001\001\000\030\011\004\012\010\013\006\014\031" +
    "\015\003\016\026\017\024\020\027\021\025\022\013\023" +
    "\161\001\001\000\026\011\121\012\010\013\006\014\031" +
    "\015\003\016\026\017\024\020\027\021\025\022\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\011\004" +
    "\012\010\013\006\014\031\015\003\016\026\017\024\020" +
    "\027\021\025\022\013\023\165\001\001\000\026\011\121" +
    "\012\010\013\006\014\031\015\003\016\026\017\024\020" +
    "\027\021\025\022\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\172\004\044\005\042\006\036\007" +
    "\034\010\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\004\012" +
    "\010\013\006\014\031\015\003\016\026\017\024\020\027" +
    "\021\025\022\013\023\176\001\001\000\026\011\121\012" +
    "\010\013\006\014\031\015\003\016\026\017\024\020\027" +
    "\021\025\022\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\203\004\044\005\042" +
    "\006\036\007\034\010\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\207\004\044" +
    "\005\042\006\036\007\034\010\043\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // zerm ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr("id", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // zerm ::= BOOLEAN_LITERAL 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // zerm ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // zerm ::= CHAR_LITERAL 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // zerm ::= MINUS FLOAT_LITERAL 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(-f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // zerm ::= FLOAT_LITERAL 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // zerm ::= MINUS INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(-i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // zerm ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // zerm ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("zerm",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= zerm 
            {
              Expr RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = z; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= zerm EXP term 
            {
              Expr RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(z, t, sym.EXP); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logic ::= term NOTEQUAL term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.NOTEQUAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logic ::= term EQUAL term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.EQUAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logic ::= term GTE term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.GTE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logic ::= term LTE term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.LTE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logic ::= term GT term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.GT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logic ::= term LT term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.LT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logic ::= term OR term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.OR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logic ::= term AND term 
            {
              Expr RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t1, t2, sym.AND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= term 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= factor MOD term 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(f, t, sym.MOD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= factor DIVIDE term 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(f, t, sym.DIVIDE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= factor TIMES term 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(f, t, sym.TIMES); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // math ::= factor 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // math ::= math MINUS factor 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(m, f, sym.MINUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // math ::= math PLUS factor 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(m, f, sym.PLUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= logic 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= math 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dowhile ::= DO LCURLY statement_list RCURLY WHILE expr 
            {
              Stmt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = Stmt.dowhile_s(e, sl);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dowhile",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while ::= WHILE expr LCURLY statement_list RCURLY 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = Stmt.while_s(e, sl);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // else_list ::= ELSE LCURLY statement_list RCURLY 
            {
              ArrayList<ElseBlock> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        ElseBlock block = new ElseBlock(sl);
                        ArrayList<ElseBlock> block_list;
                        block_list = new ArrayList<ElseBlock>();
                        block_list.add(block);
                        RESULT = block_list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // else_list ::= ELSEIF expr LCURLY statement_list RCURLY 
            {
              ArrayList<ElseBlock> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ElseBlock block = new ElseBlock(e, sl);
                        ArrayList<ElseBlock> block_list;
                        block_list = new ArrayList<ElseBlock>();
                        block_list.add(block);
                        RESULT = block_list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // else_list ::= else_list ELSEIF expr LCURLY statement_list RCURLY 
            {
              ArrayList<ElseBlock> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<ElseBlock> el = (ArrayList<ElseBlock>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ElseBlock block = new ElseBlock(e, sl);
                        el.add(block);
                        RESULT = el;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // else_list ::= else_list ELSE LCURLY statement_list RCURLY 
            {
              ArrayList<ElseBlock> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ElseBlock> el = (ArrayList<ElseBlock>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ElseBlock block = new ElseBlock(sl);
                        el.add(block);
                        RESULT = el;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifelse ::= IF expr LCURLY statement_list RCURLY else_list 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElseBlock> el = (ArrayList<ElseBlock>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = Stmt.ifelse(e, sl, el);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifelse",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifthen ::= IF expr LCURLY statement_list RCURLY 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Stmt.ifthen(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifthen",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assign ::= ID EQ expr 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.assign(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // define ::= BOOLEAN ID EQ expr 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.define_boolean(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // define ::= STRING ID EQ expr 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.define_string(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // define ::= CHAR ID EQ expr 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.define_char(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // define ::= FLOAT ID EQ expr 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.define_float(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // define ::= INT ID EQ expr 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.define_int(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declare ::= BOOLEAN ID 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.declare_boolean(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declare ::= CHAR ID 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.declare_char(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declare ::= STRING ID 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.declare_string(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declare ::= FLOAT ID 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.declare_float(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declare ::= INT ID 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.declare_int(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // print ::= PRINT expr 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Stmt.print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // noprint ::= NOPRINT LPAREN RPAREN 
            {
              Stmt RESULT =null;
		  
                    RESULT = Stmt.noprint();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noprint",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // noprint ::= NOPRINT LPAREN expr RPAREN 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    System.out.println("Hello from NOPRINT");
                    RESULT = Stmt.noprint(e); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noprint",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= dowhile SEMI 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= while SEMI 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt w = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= assign SEMI 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= ifelse SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt i = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= ifthen SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt i = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= define SEMI 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declare SEMI 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= noprint SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt n = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= print SEMI 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt p = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement 
            {
              ArrayList<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    ArrayList<Stmt> sl;
                    sl = new ArrayList<Stmt>();
                    sl.add(s);
                    RESULT = sl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement_list statement 
            {
              ArrayList<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    sl.add(s);
                    RESULT = sl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stmt> sl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = sl;
/*                    System.out.println("");
                    Memory.memory.clear();

                    System.out.println("----------------- PREFIX OF THE PROGRAM -----------------");
                    for (Stmt s : sl){
                        s.execute_prefix();

                    }

                    System.out.println();
                    System.out.println("----------------- OUTPUT OF THE PROGRAM -----------------");
                    for (Stmt s : sl){
                        s.execute();
                    }
*/
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

